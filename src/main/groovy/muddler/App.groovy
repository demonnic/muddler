/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package muddler
import groovy.json.JsonSlurper
import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil
import static groovy.io.FileType.File
import muddler.mudlet.packages.*
import java.util.regex.Pattern


class App {
  static void main(String[] args) {
    // read mfile and setup packageName and packageVersion
    def file = new File('./mfile')
    def packageName = ""
    def packageVersion = "1.0"
    if (file.exists()) {
      def config = new JsonSlurper().parse(file)
      packageName = config.package ?: packageName
      packageVersion = config.version ?: packageVersion
    }
    if (packageName == "") {
      def fullPath = System.properties['user.dir']
      packageName = fullPath.split(Pattern.quote(File.separator))[-1]
    }
    // we will leberage Ant for token filtering and zip creation
    def ant = new AntBuilder()
    def outputDir = new File('build')
    // all builds are clean builds. fight me.
    outputDir.deleteDir()
    def tmp = new File(outputDir, 'tmp')
    tmp.mkdirs()
    // filter our source files from src into build/filtered/src and replace @PKGNAME@ with the package name as used by Mudlet
    // no more images failing to load because the package name changed or you bumped version
    ant.copy(todir:'build/filtered/src') {
      fileset(dir: "src/") {
        exclude(name: "resources/")
      }
      filterset(){
        filter(token: "PKGNAME", value: "$packageName-$packageVersion")
      }
    }
    
    // now create the individual item type packages
    def aliasP = new AliasPackage()
    def scriptP = new ScriptPackage()
    def timerP = new TimerPackage()
    def triggerP = new TriggerPackage()
    def keyP = new KeyPackage()
    def builder = new StreamingMarkupBuilder()
    builder.encoding = 'UTF-8'
    def mudletPackage = builder.bind {
      mkp.xmlDeclaration()
      mkp.yieldUnescaped '<!DOCTYPE MudletPackage>'
      'MudletPackage'(version: "1.001") {
        mkp.yieldUnescaped scriptP.toXML()
        mkp.yieldUnescaped aliasP.toXML()
        mkp.yieldUnescaped timerP.toXML()
        mkp.yieldUnescaped triggerP.toXML()
        mkp.yieldUnescaped keyP.toXML()
      }
    }
    def mpXML = XmlUtil.serialize(mudletPackage)
    
    new File(outputDir,packageName + ".xml").withWriter { writer ->
      writer.write(mpXML)
    }
    new File(tmp, 'config.lua').withWriter { writer ->
      writer.write("mpackage = \"$packageName-$packageVersion\"")
    }

    def resDir = new File("src${File.separator}resources")
    if (resDir.exists()) {
      ant.copy(toDir: 'build/tmp') {
        fileset(dir: 'src/resources')
      }
    }
    ant.copy(toDir: 'build/tmp') {
      fileset(file: "build/$packageName" + ".xml")
    }
    ant.zip(baseDir: 'build/tmp', destFile: "build/$packageName" + ".mpackage")
    //println XmlUtil.serialize(mudletPackage)
  }
}
